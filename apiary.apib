FORMAT: 1A

# Nektria Routing - Work in Progress

The Routing Service of RECS API is designed to elaborate and plan optimized deliveries. First, the merchant can identify and 
minimize delivery bottlenecks using our real time incentive proposals for the shoppers. Then, once all the orders have been 
passed, he can retrieve the optimized route to execute the deliveries.

The API is organized in 4 main areas:
- Data Types are defined in the first part, along with methods that allow the validation of the corresponding elements.
- Service Requests allow real time proposals so that the shopper is invited to choose delivery time slots that best suits the delivery planning.
- Optimization requests aim to provide optimal routes for executing the deliveries. As a part of it, a set of requests guarantees we can keep orders 
synchronized between the systems at all times, thus making sure incentives can achieve the best improvements.
- Configuration and Assets Management requests permit day to day management of the client resources used to execute deliveries.

## Authentication Schemes

+ Basic (apikey)

    You must provide an API key, which is a unique identifier for your account, as well as an application identifier that helps to
    track which of your applications is making calls to the API.
    + Headers
        + Authorization: Basic YourApiKey


##Group Data Types
## Address [/check/address]
An address contains information about a physical address for pick-up and delivery pruposes

+ Attributes (object)
    + postal_code: 08022 (required, string)
    + street_type: Pza. (optional, string)
    + street_name: Urquinaona (optional, string)
    + street_number: 5 (optional, string)
    + city: Barcelona (optional, string)
    + country_code: ES (required, string)
    + elevator: true (optional, boolean) 
    + coordinates (required)
        + latitude: 41.123456 (required, number)
        + longitude: 2.123456 (required, number)

### Check if an Address is valid [POST /check/address]
+ Attributes (Address)
+ Response 200 (application/json)
    Address is valid
    + Body
    
            {"status": "success"}
            
+ Response 400 (application/json)
    Invalid Address
    + Body
    
            {
                "status": "error",
                "error": "The address is invalid"
            }
    

## Product [/check/product]

+ Attributes (object)
    + name: box (required, string) - should be set to box for Ulabox requests
    + quantity: 8 (required, number)
    + weight_kg: 4.5 (optional, number)

### Check if an Product is valid [POST /check/product]
+ Attributes (Product)
+ Response 200 (application/json)
    Product is valid
    + Body
    
            {"status": "success"}
            
+ Response 400 (application/json)
    Invalid Product / malformatted
    + Body
    
            {
                "status": "error",
                "error": "The product is missing weight information"
            }

## TimeWindow [/time_windows] 

+ Attributes (object)
    + `start_time`: 2016-03-29T15:19:00+01:00 (required, string) ISO8601 time at which the window starts
    + `end_time`: 2016-03-29T15:37:00+01:00 (required, string) ISO8601 time at which the window ends

### Check if a Time Window is valid [POST /check/time_window]
+ Attributes (TimeWindow)
+ Response 200 (application/json)
    Time Window is valid
    + Body
    
            {"status": "success"}
            
+ Response 400 (application/json)
    Invalid Time Window
    + Body
    
            {
                "status": "error",
                "error": "start time is earlier than end time"
            }


## Step [/steps] 

+ Attributes (object)
    + location (required, Address) delivery address of the order
    + `delivery_window` (required, TimeWindow) expected delivery window
    + `order_number` (required, string) reference corresponding to an order

### Check if a Step is valid [POST /check/step]
+ Attributes (Step)
+ Response 200 (application/json)
    Step is valid
    + Body
    
            {"status": "success"}
            
+ Response 400 (application/json)
    Invalid Step
    + Body
    
            {
                "status": "error",
                "error": "unknown order reference"
            }

## Order [/orders]    

+ Attributes (object)
    + order_number: AA123456 (required, string)
    + destination (required, Address)
    + products (array[Product])

### Check if an Order is valid [POST /check/order]
+ Attributes (Address)
+ Response 200 (application/json)
    Address is valid
    + Body
    
            {"status": "success"}
            
+ Response 400 (application/json)
    Invalid Address
    + Body
    
            {
                "status": "error",
                "error": "The address is invalid"
            }
    


### Create an Order [POST /orders]
+ Request (application/json)
+ Attributes (Order)
+ Response 201 (application/json)
    Returned on creation success  

    + Headers
    
            Location: /orders/{order_number}
    
    + Body  

            {
                "status": "success",
                "content": null
            }

+ Response 400
    Returned if there is any parameter missing or with wrong type or format
    + Body
+ Response 409
    Returned if there is already an order with the same order_number
    + Body
+ Response 500
    Returned if an error occurred storing the order
    + Body

### Get an Order [GET /orders/{order_number}]
+ Parameters
    + order_number (required, string) - Order ID provided during the order creation request
+ Response 200 (application/json)
    + Attributes (Order)

### Update an Order [PUT /orders/{order_number}]
+ Parameters
    + order_number (required, string) - Order id provided during the order creation request
    
+ Request (application/json)
    + Attributes (object)
        + destination (required, Address)
        + products (array[Product])

+ Response 204 (application/json)
    Update successful
    + Body

+ Response 400
    There are missing parameters or with wrong type/format
    + Body

+ Response 404
    Returned if there is no order with the specified order_number
    + Body

+ Response 500
    Returned if an error occurred updating the order
    + Body
        

### Delete an Order [DELETE /orders/{order_number}]
+ Parameters
    + order_number (required, string) - Order id provided during the order creation request

+ Response 204 (application/json)
    Returned on deletion success  
    + Body

+ Response 404
    Returned if there is no order with the specified order_number
    + Body

+ Response 500
    Returned if an error occurred deleting the order
    + Body
    
## Vehicle [/vehicles]    

+ Attributes (object)
    + `vehicle_number`: BCN_VAN_1 (required, string)
    + capacity: 60 (required, number)
    + type: van (optional, string)
    + options (optional) 
        + efficiency: 1.2 (optional, number)
        + helpers: 1 (optional, number)

### Check if an Vehicle is valid [POST /check/vehicle]
+ Attributes (Vehicle)
+ Response 200 (application/json)
    Vehicle is valid
    + Body
    
            {"status": "success"}
            
+ Response 400 (application/json)
    Invalid Vehicle
    + Body
    
            {
                "status": "error",
                "error": "Unknown option speed"
            }
    
### List Vehicles [GET /vehicles?type={type}&limit={limit}]
+ Parameters
    + limit (optional, number) - Default 10, from 1 to 100. Number of returned values.
    + type: routing (optional, string) - Filter the services by type

+ Response 200 (application/json)
    + Attributes (array[Vehicle])
        

### Get a Vehicle [GET /vehicles/{vehicle_number}]
+ Parameters
    + vehicle_number (required, string) - Vehicle number provided during the vehicle creation request
+ Response 200 (application/json)
    + Attributes (Vehicle)

## Area [/areas]    

+ Attributes (object)
    + `area_number`: BCN (required, string)
    + `postal_codes` (required, array)

### Check if an Area is valid [POST /check/area]
+ Attributes (Area)
+ Response 200 (application/json)
    Area is valid
    + Body
    
            {"status": "success"}
            
+ Response 400 (application/json)
    Invalid Area
    + Body
    
            {
                "status": "error",
                "error": "Incorrect postal code"
            }
    
### List Areas [GET /areas?limit={limit}]
+ Parameters
    + limit (optional, number) - Default 10, from 1 to 100. Number of returned values.

+ Response 200 (application/json)
    + Attributes (array[])
    
        list of area numbers
        

### Get an Area [GET /areas/{area_number}]
+ Parameters
    + area_number (required, string) - Unique Area Identifier
+ Response 200 (application/json)
    + Attributes (Area)

## Route [/routes]    

+ Attributes (object)
    + `route_number`: 783 (required, string)
    + origin (required, Address)
    + `loading_window` (required, TimeWindow)
    + `execution_window` (required, TimeWindow)
    + vehicle (required, Vehicle)
    + itinerary (required, array[Step])
    + status (required, string)

### Check if a Route is valid [POST /check/route]
+ Attributes (Route)
+ Response 200 (application/json)
    Vehicle is valid
    + Body
    
            {"status": "success"}
            
+ Response 400 (application/json)
    Invalid Route
    + Body
    
            {
                "status": "error",
                "error": "Unknown vehicle BCN_VAN_15"
            }
    
### List Routes [GET /routes?status={status}&limit={limit}]
+ Parameters
    + limit (optional, number) - Default 10, from 1 to 100. Number of returned values.
    + status: pending (optional, string) - Filter the routes by status

+ Response 200 (application/json)
    + Attributes (array[Vehicle])
        

### Get a Route [GET /routes/{route_number}]
+ Parameters
    + route_number (required, string) - Route unique identification number
+ Response 200 (application/json)
    + Attributes (Route)

##Group Services

## Service [/services]

+ Attributes (object)
    + type (required, string)
    + destination (required, Address)
    + products (required, array[Product])
    + origin (optional, Address) - Overrides the default Warehouse address



### List Services [GET /services?type={type}&expand={expand}&limit={limit}]
+ Parameters
    + limit (optional, number) - Default 10, from 1 to 100. Number of returned values.
    + expand: false (optional, boolean) - When true, returns entire shift objects.
    + type: routing (optional, string) - Filter the services by type

+ Response 200 (application/json)
    + Attributes (array[Service])
        


### Create Routing Service [POST /services/routing]

+ Request (application/json)

+ Attributes
    + destination (required, Address)
    + products (required, array[Product])
    + origin (optional, Address) - Overrides the default Warehouse address

+ Response 201 (application/json)
  Service has been successfully requested
    
    + Attributes
        + status (required): success
        + content (required)
            + service_number (required): 4095
            + availability (required): true
            + best_cost (required): 68
            + highest_cost (required): 100
            + `time_window_costs` (required, array)

    + Body
    
            {
                "service_number": 4095,
                "availability": true,
                "best_cost": 68,
                "highest_cost": 100,
                "time_window_costs": [
                    {
                        "start_time": "2016-03-14T07:00:00+0100",
                        "end_time": "2016-03-14T09:00:00+0100",
                        "cost": 76
                    },
                    {
                        "start_time": "2016-03-14T08:00:00+0100",
                        "end_time": "2016-03-14T10:00:00+0100",
                        "cost": 77
                    },
                    {
                        "start_time": "2016-03-14T09:00:00+0100",
                        "end_time": "2016-03-14T11:00:00+0100",
                        "cost": 78
                    },
                    {
                        "start_time": "2016-03-14T10:00:00+0100",
                        "end_time": "2016-03-14T12:00:00+0100",
                        "cost": 80
                    },
                    {
                        "start_time": "2016-03-14T11:00:00+0100",
                        "end_time": "2016-03-14T13:00:00+0100",
                        "cost": 93
                    }
                ]
                }
            }
            

### Book Routing Service [PATCH /services/routing/{service_id}/book]

+ Parameters
    + service_id (required, string)

+ Request (application/json)

        {
            "delivery_windows":[
                {
                    "start_time": "2016-03-14T19:00:00+0100",
                    "end_time": "2016-03-14T21:00:00+0100"
                }
            ]
        }
        
    + Attributes
        + delivery_windows (required, array) - the selected delivery time windows
            + start_time (required, string)
            + end_time (required, string)

+ Response 200 (application/json)
        
        {
          "status": "success",
          "content": null
        }
        
        

### Confirm Routing Service [PATCH /services/routing/{service_id}/confirm]

+ Parameters
    + service_id (required, string)

+ Request (application/json)

        {
            "order_number": "LP22842-U",
            "delivery_windows":[
                {
                    "start_time": "2016-03-14T19:00:00+0100",
                    "end_time": "2016-03-14T21:00:00+0100"
                }
            ]
        }
        
    + Attributes
        + order_number (required, string) - the order number in Ulabox servers
        + delivery_windows (optional, array) - the selected delivery time windows
            + start_time (required, string)
            + end_time (required, string)
        
+ Response 200 (application/json)
        
        {
            "status": "success",
            "content": {
            "delivery_windows":[
                    {
                        "start_time": "2016-03-14T19:00:00+0100",
                        "end_time": "2016-03-14T21:00:00+0100"
                    }
                ]
            }
        }

##Group Optimize

## Shift [/shifts]

A Shift groups the orders of a specific time range and area, and has relationships with the resources that are assigned to fullfill these orders.

+ Attributes (object)
    + shift_id: 123 (required, number)
    + start_time: `2016-03-14T07:00:00+0100` (required, string) - The start date/time (ISO8601 format)
    + end_time: `2016-03-14T15:00:00+0100` (required, string) - The end date/time (ISO8601 format)
    + status (string)

### List Shifts [GET /shifts?limit={limit}&expand={expand}]

+ Parameters
    + limit (optional, number) - Default 10, from 1 to 100. Number of returned values.
    + expand: false (optional, boolean) - When true, returns entire shift objects.

+ Response 200 (application/json)

    + Attributes
        + status (required)
        + content (array[Shift])
        
    + Body
    
            {
                "status": "success",
                "content": [
                    {
                        "shift_id": 1,
                        "start_time": "2016-03-14T07:00:00+0100",
                        "end_time": "2016-03-14T15:00:00+0100",
                        "status": "pending"
                    },
                    {
                        "shift_id": 2,
                        "start_time": "2016-03-14T15:00:00+0100",
                        "end_time": "2016-03-14T23:00:00+0100",
                        "status": "closed"
                    }
                ]
            }


### Get a Shift [GET /shifts/{shift_id}]

+ Parameters
    + shift_id (required, string) - Id of the shift, retrievable with a GET request.

+ Request (application/json)
        
+ Response 200 (application/json)
        
        {
            "status": "success",
            "content": 
            {
                "start_time": "2016-03-17T15:00:00+0100",
                "end_time": "2016-03-17T23:00:00+0100",
                "status": "optimized",
                "routes": [
                    123, 456, 789
                ],
                "pending_orders":[
                    
                ]
            }
        }
        
+ Response 404
    Shift doesn't exists
    + Body
       


### Close a Shift [PATCH /shifts/{shift_id}/close]

+ Parameters
    + shift_id (required, string)

+ Request (application/json)
        
+ Response 200 (application/json) 
    
+ Response 404


### Optimize a Shift [PATCH /shifts/{shift_id}/optimize]

+ Parameters
    + shift_id (required, string)
        
+ Request (application/json)
        
+ Response 200 (application/json)
        
        {
            "status": "success",
            "content": null
        }
        
+ Response 404

### Get all Routes of a Shift [GET /shifts/{shift_id}/routes]
        
+ Response 200 (application/json)
        
        {
            "status": "success",
            "content": 
            [
                {
                    "order_number": 123,
                    "expected_delivery_time": "2016-03-17T09:01:00+0100"
                },
                {
                    "order_number": 456,
                    "expected_delivery_time": "2016-03-17T09:17:00+0100"
                },
                {
                    "order_number": 776,
                    "expected_delivery_time": "2016-03-17T09:35:00+0100"
                },
                {
                    "order_number": 801,
                    "expected_delivery_time": "2016-03-17T09:54:00+0100"
                }
            ]
        }
        
+ Response 404


##Group Configuration & Assets Management

#Settings [/settings]
### Get Setting [GET /settings/{key}]
+ Parameters
    + key (required, string) - Setting Key
+ Response 200 (application/json)
+ Response 404

### Update Setting [PUT /settings/{key}]
+ Parameters
    + key (required, string) - Setting Key
    
+ Request (application/json)
    + Attributes
        + value (required, string)

+ Response 204 (application/json)
    Update successful
    + Body
+ Response 404